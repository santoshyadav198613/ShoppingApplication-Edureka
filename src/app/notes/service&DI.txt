1. Services:
    What is a Service:
        A common class which will provide some functionality.
    why service is important:
        1. Reusability
        2. Code seperation
        3. Business logiC/rules are seperated
        4. Get the data from multiple APIs
        5. loosely coupled system


Creating a service in Angualr:
1. ng g service <service_name>
2. @Injectable() this decortaor with provide the class a a service
3. add the methods required.
4. Register the service, using app.module.ts , add an entry in
providers array.
5. Using the service


DI (Dependency Injection)
1. it helps us to create loosely coupled system
2. the class dont need to create a instance
3. Widely used Design Pattern

Angular DI framework:
1. Has its on IOC(Inversion of Control).
2. No overhead like other frameworks

Singleton:
1. You get a single instance of class across application
2. Can be used to share some common data.


Singleton Vs NonSingleton
1. Register a service in app/Root module and it will be Singleton
2. If we register the service in component , it becomes available for particular component


we can alo register our service using below syntax
  { provide: LoginService, useClass: LoginService } 

the above syntax will help us to remove any implmentation and use new implmentation in future
  { provide: LoginService, useClass: NewLoginService } 


Other types of non-class based service:
1. Value provider  -- Will be used when we have some static data which we want to use as a service.
 For eg: API End Point, Page Size in our application
2. Factory  -- we will discuss during routing



