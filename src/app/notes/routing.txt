why routing is needed.
1. Navigating within application
2. Display different UI based on URL
3. pass some data in URL

ui.router is third party library to achive the routing functionality.

How to implememt routing:
1. import and register the RouterModule
2. use forRoot method to register the different navigation in our app.
3. use routerLink to assigne different URLS
4. place <router-outlet> on appComponent


RoutingModule
1. We can seperate the code related to routing configuration, by creating a new module 
and making routing configuration changes in that module.

Feature Modules:
We can place all components/directices/pipes and routing configuration and services related to a 
single feature together by using feature module.

Shared Module:
this will place all common modules in single file.


Router service is used to navigate from TS files.


Dynamic Routes:
1. we need a url like 'product/id' , we can configure the same by useg path : 'product/:id'
2. To access the same in the component we need to use a sevice "ActivatedRoute" and we need to use 
paramMap.

children property:

Use this property when we want to load some component based on URL in same page.
Or in simple terms want to achive nesting.


Lazy Loading:
1. Load the moule when requested.
2. Angular by default has eager loading configured.
3. We should lazy load the module which is rarely used

Pre-requisite:
1. A module should not share anything with any other module, it means it should not be part of any imports array
2. It should not have any path for parent router configuration
3. The routing module will have the configuration , by using loadChildren property 
syntax is 'reativepathforcomponent#className for module'


Guards:
1. Restrict the access to unauthorized area.

a. canActivate:
this auth guard will check if you can access the URL.
you can add multiple guards to this property in routing configuration.

b. canActivateChild: In case we want to have extra layer of security for our child routes.

c. Resolve: This guard is used to prefetch the data

